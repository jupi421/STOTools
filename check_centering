#include "polcalc.hpp"

using namespace PolCalc;

int main() {
	auto poscar = readPOSCAR("./test/POSCAR2").value(); // or "POSCAR"
	Positions positions_raw = poscar.m_positions_direct;

	// If you want to derive N_Sr/N_Ti/N_O from POSCAR instead of hardcoding:
	// size_t N_Sr = poscar.m_counts.at(0), N_Ti = poscar.m_counts.at(1), N_O = poscar.m_counts.at(2);
    auto atoms = sortPositionsByType(positions_raw, 800, 800, 2400).value();

    Eigen::Matrix3d cell_matrix = poscar.m_cell; // <- critical
	std::cout << poscar.m_cell << "\n";

    auto A_NNs = getNearestNeighbors(atoms.m_A, atoms.m_B, 8, cell_matrix).value();
    auto O_NNs = getNearestNeighbors(atoms.m_O, atoms.m_B, 6, cell_matrix).value();
    auto B_NNs = getNearestNeighbors(atoms.m_B, atoms.m_B, 6, cell_matrix).value();

    //for (size_t i = 0; i < B_NNs.size(); ++i) {
    //    std::println("reference index: {}", i);
    //    for (size_t j = 0; j < B_NNs.at(i).size(); ++j) {
    //        const auto& [nn_idx, d2] = B_NNs.at(i).at(j);
    //        std::println("NN index: {}, distance to ref {}", nn_idx, std::sqrt(d2));
    //    }
    //    std::println("");
    //}

	auto phase_factors = helper::findPhaseFactor(atoms.m_B, B_NNs);

	auto local_UCs = createLocalUCs(atoms.m_A, atoms.m_B, atoms.m_O, A_NNs, O_NNs, phase_factors, PolCalc::DWType::HT, cell_matrix);

	auto center = [](auto& pos, const Position& ref) {
		for (auto& p : pos) {
			p.first.m_position -= ref;
			p.second.m_position -= ref;
		}
	};
	std::vector<std::pair<Atom, Atom>> local_UC_0_A { local_UCs.at(0).m_A_cart_nopbc };
	std::vector<std::pair<Atom, Atom>> local_UC_51_A { local_UCs.at(51).m_A_cart_nopbc };

	std::vector<std::pair<Atom, Atom>> local_UC_0_A_centered { local_UCs.at(0).getCenteredUC().m_A_cart_nopbc };
	std::vector<std::pair<Atom, Atom>> local_UC_51_A_centered { local_UCs.at(51).getCenteredUC().m_A_cart_nopbc };

	// center around first A
	Position first_A_0 { local_UC_0_A.at(0).first.m_position };
	Position first_A_51 { local_UC_51_A.at(0).first.m_position };


	center(local_UC_0_A, first_A_0);
	center(local_UC_51_A, first_A_51);

	// differences between A
	auto diff = [](auto& lhs, auto& rhs) {
		std::vector<std::pair<Vector, Vector>> d;
		for (auto&& [pair1, pair2] : std::ranges::views::zip(lhs, rhs)) {
			d.emplace_back(pair1.first.m_position - pair2.first.m_position, pair1.second.m_position - pair2.second.m_position);
		}
		return d;
	};

	auto d = diff(local_UC_0_A, local_UC_51_A);
	auto d_centered = diff(local_UC_0_A_centered, local_UC_51_A_centered);

	size_t i { };
	for (auto&& diff : local_UC_0_A) {
		std::println("pair.first  {}; {} {} {}", i, diff.first.m_position.x(), diff.first.m_position.y(), diff.first.m_position.z());
		std::println("pair.second {}; {} {} {}", i++, diff.second.m_position.x(), diff.second.m_position.y(), diff.second.m_position.z());
		std::println();
	}
	std::println();

	size_t j { };
	for (auto&& diff : local_UC_51_A) {
		std::println("pair.first  {}; {} {} {}", j, diff.first.m_position.x(), diff.first.m_position.y(), diff.first.m_position.z());
		std::println("pair.second {}; {} {} {}", j++, diff.second.m_position.x(), diff.second.m_position.y(), diff.second.m_position.z());
		std::println();
	}
	std::println();

	size_t k { };
	for (auto&& diff : d) {
		std::println("pair.first  {}; {} {} {}", k, diff.first.x(), diff.first.y(), diff.first.z());
		std::println("pair.second {}; {} {} {}", k++, diff.second.x(), diff.second.y(), diff.second.z());
		std::println();
	}

	std::println();
	std::println();

	size_t l { };
	for (auto&& diff : local_UC_0_A_centered) {
		std::println("pair.first  {}; {} {} {}", l, diff.first.m_position.x(), diff.first.m_position.y(), diff.first.m_position.z());
		std::println("pair.second {}; {} {} {}", l++, diff.second.m_position.x(), diff.second.m_position.y(), diff.second.m_position.z());
		std::println();
	}
	std::println();

	size_t m { };
	for (auto&& diff : local_UC_51_A_centered) {
		std::println("pair.first  {}; {} {} {}", m, diff.first.m_position.x(), diff.first.m_position.y(), diff.first.m_position.z());
		std::println("pair.second {}; {} {} {}", m++, diff.second.m_position.x(), diff.second.m_position.y(), diff.second.m_position.z());
		std::println();
	}
	std::println();

	size_t n { };
	for (auto&& diff : d_centered) {
		std::println("pair.first  {}; {} {} {}", n, diff.first.x(), diff.first.y(), diff.first.z());
		std::println("pair.second {}; {} {} {}", n++, diff.second.x(), diff.second.y(), diff.second.z());
		std::println();
	}
}
